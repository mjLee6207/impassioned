<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper
   namespace="egovframework.example.board.service.impl.BoardMapper">
   


	<!-- 7/8 카테고리별 닉네임이 보이는 게시글 목록 조회(민중) -->
	<!-- 카테고리별 조회를 위해 7월 8일 오후 2시46분 코드수정함: 강승태 -->
	<!-- 7월 8일 4시 게시판 -BOARD ID를 통한 작성순으로 하도록 수정 
	    	ORDER BY b.BOARD_ID DESC 추가  -->	
<select id="selectBoardList" parameterType="Criteria" resultType="BoardVO">
	SELECT 
		b.*, 
		m.nickname,
		<!-- 게시판에서 좋아요 수 카운터를 위해 한줄 추가  2025년 7월 9일 오전 10시 41분: 강승태 -->
(SELECT COUNT(*) FROM BOARD_LIKE bl WHERE bl.BOARD_ID = b.BOARD_ID) AS likeCount
	FROM BOARD b
	JOIN MEMBER m ON b.writer_idx = m.member_idx
	WHERE 1=1
	<if test="searchKeyword != null and searchKeyword != ''">
		AND b.TITLE LIKE '%' || #{searchKeyword} || '%'
	</if>
	<if test="category != null and category != ''">
		AND b.CATEGORY = #{category}
	</if>
	ORDER BY b.BOARD_ID DESC
	OFFSET #{firstIndex} ROWS
	FETCH NEXT #{pageUnit} ROWS ONLY
</select>

	<!-- 7/7 카테고리별 게시글 총 개수(민중) -->
	<!-- 7/8일 카테고리별 검색을위해 수정: WHERE 1=1로변경, IF문 삽입 -->
<select id="selectBoardListTotCnt" parameterType="Criteria" resultType="int">
	SELECT COUNT(*)
	FROM BOARD
	WHERE 1=1
	<if test="searchKeyword != null and searchKeyword != ''">
		AND TITLE LIKE '%' || #{searchKeyword} || '%'
	</if>
	<if test="category != null and category != ''">
		AND CATEGORY = #{category}
	</if>
</select>


   <!-- 게시글 등록 -->
   <insert id="insert" parameterType="BoardVO">
   
      <!-- 시퀀스에서 다음 값 조회 -->
      <selectKey keyProperty="boardId" resultType="int"
         order="BEFORE">
         SELECT BOARD_SEQ.NEXTVAL FROM DUAL
      </selectKey>

      INSERT INTO BOARD (
      BOARD_ID, CATEGORY, TITLE, PREPARE, CONTENT,
      THUMBNAIL, WRITE_DATE, VIEW_COUNT, WRITER_IDX
      )
      VALUES (
      #{boardId}, #{category}, #{title}, #{prepare}, #{content},
      #{thumbnail}, SYSDATE, #{viewCount}, #{writerIdx}
      )
   </insert>


   <!-- 수정 게시글 상세 조회 -->
   <select id="selectBoard" parameterType="int"
      resultType="BoardVO">
      SELECT *
      FROM BOARD
      WHERE BOARD_ID = #{boardId}
   </select>


   <!-- 게시글 수정 -->
   <update id="update" parameterType="BoardVO">
      UPDATE BOARD
      SET
      CATEGORY = #{category},
      TITLE = #{title},
      PREPARE = #{prepare},
      CONTENT = #{content},
      THUMBNAIL = #{thumbnail}
      WHERE BOARD_ID = #{boardId}
   </update>


	<!-- 게시글 삭제 -->
	<delete id="delete" parameterType="BoardVO">
		DELETE FROM BOARD
		WHERE BOARD_ID = #{boardId}
	</delete>
	
	<!-- 조회수 증가 -->
	<update id="increaseViewCount" parameterType="int">
	    UPDATE BOARD	
	    SET VIEW_COUNT = VIEW_COUNT + 1
	    WHERE BOARD_ID = #{boardId}
	</update>

   <!-- 닉네임 포함된 상세조회: 공개용 상세보기 -->
   <select id="selectBoardDetail" parameterType="int" resultType="BoardVO">
      SELECT B.*, M.NICKNAME
      FROM BOARD B
      LEFT JOIN MEMBER M ON B.WRITER_IDX = M.MEMBER_IDX
      WHERE B.BOARD_ID = #{boardId}
   </select>
   
   <!-- 댓글 리스트 조회 -->
	<select id="selectReviewList" parameterType="int" resultType="egovframework.example.board.service.ReviewVO">
	  SELECT R.*, M.NICKNAME
	  FROM BOARD_REVIEW R
	  JOIN MEMBER M ON R.WRITER_IDX = M.MEMBER_IDX
	  WHERE R.BOARD_ID = #{boardId}
	  ORDER BY R.REVIEW_ID DESC
	</select>
	
	<insert id="insertReview" parameterType="egovframework.example.board.service.ReviewVO">
	  <selectKey keyProperty="reviewId" resultType="int" order="BEFORE">
	    SELECT BOARD_REVIEW_SEQ.NEXTVAL FROM DUAL
	  </selectKey>
	  INSERT INTO BOARD_REVIEW(REVIEW_ID, BOARD_ID, WRITER_IDX, CONTENT, WRITE_DATE)
	  VALUES(#{reviewId}, #{boardId}, #{writerIdx}, #{content}, SYSDATE)
	</insert>
	<!-- 댓글 수정 기능 -->
	<update id="editReview">
    UPDATE BOARD_REVIEW
    SET CONTENT = #{content}
    WHERE REVIEW_ID = #{reviewId}
      AND WRITER_IDX = #{memberIdx}
</update>
	<!-- 댓글 삭제 기능  -->
	<delete id="deleteReview">
    DELETE FROM BOARD_REVIEW
    WHERE REVIEW_ID = #{reviewId}
      AND WRITER_IDX = #{memberIdx}
</delete>
<!-- 인기게시글 조회  -->
<select id="selectBestPosts" resultType="egovframework.example.board.service.BoardVO">
     SELECT
        B.*,
        NVL(L.LIKE_CNT, 0) AS LIKE_CNT
    FROM BOARD B
    LEFT JOIN (
        SELECT BOARD_ID, COUNT(*) AS LIKE_CNT
        FROM BOARD_LIKE
        GROUP BY BOARD_ID
    ) L ON B.BOARD_ID = L.BOARD_ID
    ORDER BY LIKE_CNT DESC, B.BOARD_ID DESC
    FETCH FIRST 4 ROWS ONLY
</select>
<!-- 썸네일 경로 업데이트 -->
<update id="updateThumbnail" parameterType="BoardVO">
    UPDATE BOARD
    SET THUMBNAIL = #{thumbnail}
    WHERE BOARD_ID = #{boardId}
</update>
</mapper>
